# run.input.file set equal to local input .tsv file by taking the path for the runDataUploadedFile from run.props
run.input.file = labkey.transform.getRunPropertyValue(run.props, "runDataUploadedFile");
### Parameter set at import time in web UI to generate plots
# gen_plots is set equal to the generate_plots value found in run.props. This is a manual selection when running assay.
gen_plots <- !is.na(labkey.transform.getRunPropertyValue(run.props, "generate_plots"));
# assay_design_id is set equal to the protocolId of the assay found in run.props, which is unique for each assay.
assay_design_id <- labkey.transform.getRunPropertyValue(run.props, "protocolId");
### Get the file output by the transform script.
# run.prop.file is set equal to transformedRunPropertiesFile found in run.props which sets the path. Currently, the uuid is pasted here
run.prop.file = labkey.transform.getRunPropertyValue(run.props, "transformedRunPropertiesFile");
# run.output.file is set equal to
run.output.file = run.props$val3[run.props$name == "runDataFile"];
# error.file is set equal to errorsFile found in run.props.
error.file = labkey.transform.getRunPropertyValue(run.props, "errorsFile");
####################
# Read input file. #
####################
raw <- read.delim(run.input.file, fileEncoding = "utf-16le") %>%
# read in table format, file path found in run.input.file, encoding needed for this instrument, pipes data down before sending to raw
filter(!is.na(Sample.Name), str_length(Sample.Name) > 0) %>%
# filter piped data to include Sample.Name if they do not have NAs & if the length of the Sample.Name is greater than 0, meaning it is not empty, pipes data down
# does a double QC check to make sure the Sample.Name value is present and not an NA
mutate(
Date = mdy_hm(Date)
)
# takes the data from the Date column of run.input.file, performs mdy_hm to convert to date time, and replaces the Date column with the converted data
#######################
# Transform the data. #
#######################
computed <-
raw %>%
group_by(Sample.Name) %>%
# pipe in raw data and group by the Sample.Name, pipe down
summarise(
dttm = format(min(Date), "%F %R"),
# sets dttm equal to the minimum date-time value in the "Date" column and then converts it into the format "YYYY-MM-DD hh:mm"
# this is because have duplicate measurements for each sample and only need 1 timestamp
concentration = round(mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets concentration equal to the mean value of Nucleic.Acid.ng.uL. and rounds to 3 digits
cv = round(sd(Nucleic.Acid.ng.uL.)/mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets cv equal to coefficiant of variance of Nucleic.Acid.ng.uL. and rounds to 3 digits
num_replicates = n(),
# sets num_replicates equal to the number of replicated samples
qc_flag = case_when(
cv > .2 ~ "HIGH CV",
num_replicates < 2 ~ "no replicates"
)
# sets qc_flag to flag for either cv > .2 or num_replicates < 2 with each having a unique flag string
) %>%
rename(SampleID=Sample.Name)
# rename Sample.Name as SampleID
################################################################################
# Demo how to check data validation and write errors to web UI to stop import. #
################################################################################
no_concentrations <- filter(computed, is.na(concentration))
# checks computed$concentration for NAs and stores in no_concentrations
err_tibble = tibble()
# creates an error tibble
if( nrow(no_concentrations) > 0) {
err_tibble = tribble(
~Type, ~Property, ~Message,
"error", "concentration", str_c("The following are missing Nucleic Acid values: ", no_concentrations$SampleID, sep = "")
)
}
# this loop runs if there are values found in no_concentrations. If > 0, it will write out an error message to err_tibble
# displayed to the user on SampleManager is "There was a problem importing the assay results. The following are missing Nucleic Acid values: %SampleID
###############################
# Demo how to generate plots. #
###############################
if( gen_plots ) {
# gen_plots is a toggle button on SampleManager, if clicked, the loop will execute
plot_data <- group_by(raw, Sample.Name)
# sets plot_data equal to raw DF grouped by Sample.Name
plots_df <- map2_dfr(group_split(plot_data), group_keys(plot_data)$Sample.Name, function(df, sampleid){
# splits plot_data by Sample.Name,
filename = file.path("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/transform_scripts/",
paste0(sampleid, "_", assay_design_id, "_", format(now(), "%Y%m%d_%H%M%S"), ".jpg"))
# sets filename equal to the file path for the .jpg to be output. Pastes "sampleid_assay_design_id_yearmonthday_hourminutesecond.jpg"
jpeg(filename, width = 350, height = 350)
# sets jpeg name as filename stored value and sets dimensions of jpeg
boxplot(Nucleic.Acid.ng.uL. ~ Sample.Name, data = df, frame = FALSE, main = sampleid)
# plots a boxplot of Nucleic.Acid.ng.uL. col by Sample.Name, with the title being the sampleid
dev.off()
tibble(SampleID=sampleid, plot=filename)
# creates a tibble to store the sampleid and plot for each sample
})
computed <- left_join(computed, plots_df, by="SampleID")
# adds the plots to computed DF using left_join and sampleid
rm(plot_data)
rm(plots_df)
# remove plot_data and plots_df objects
}
##############################################################
# Create a Universally Unique Identifier for each Assay run. #
##############################################################
baseuuid <- paste(sample(c(letters[1:6],0:9),30,replace=TRUE),collapse="")
# takes a random sampling of 30 from letters A-F and numbers 0-9 and create a base uuid
uuid <- paste(
substr(baseuuid,1,8),
"-",
substr(baseuuid,9,12),
"-",
"4",
substr(baseuuid,13,15),
"-",
sample(c("8","9","a","b"),1),
substr(baseuuid,16,18),
"-",
substr(baseuuid,19,30),
sep="",
collapse=""
)
# take the base uuid and insert "-" 3 times. Then sample 1 chr from c("8","9","a","b") and then add 16-18 with another "-". Add 19-30
writeLines(str_c("uuid", uuid, sep = "\t"), con = run.prop.file)
# concatenates "uuid" with the actual uuid separates with a tab and writes it to the run.prop.file
run.props$val3
run.props$name == "runDataFile"
View(run.props)
library(readr)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(magrittr)
library(Rlabkey)
library(purrr)
### Get run properties file
# run.props set equal to local run properties file path
run.props = labkey.transform.readRunPropertiesFile("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/transform_scripts/runProperties_local.tsv");
### Get the original file uploaded by the user. (Use this if the assay framework fails to convert it to an TSV format.)
# run.input.file set equal to local input .tsv file by taking the path for the runDataUploadedFile from run.props
run.input.file = labkey.transform.getRunPropertyValue(run.props, "runDataUploadedFile");
### Parameter set at import time in web UI to generate plots
# gen_plots is set equal to the generate_plots value found in run.props. This is a manual selection when running assay.
gen_plots <- !is.na(labkey.transform.getRunPropertyValue(run.props, "generate_plots"));
# assay_design_id is set equal to the protocolId of the assay found in run.props, which is unique for each assay.
assay_design_id <- labkey.transform.getRunPropertyValue(run.props, "protocolId");
### Get the file output by the transform script.
# run.prop.file is set equal to transformedRunPropertiesFile found in run.props which sets the path. Currently, the uuid is pasted here
run.prop.file = labkey.transform.getRunPropertyValue(run.props, "transformedRunPropertiesFile");
# run.output.file is set equal to
run.output.file = "/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/transform_scripts/runDataFile";
# error.file is set equal to errorsFile found in run.props.
error.file = labkey.transform.getRunPropertyValue(run.props, "errorsFile");
raw <- read.delim(run.input.file, fileEncoding = "utf-16le") %>%
# read in table format, file path found in run.input.file, encoding needed for this instrument, pipes data down before sending to raw
filter(!is.na(Sample.Name), str_length(Sample.Name) > 0) %>%
# filter piped data to include Sample.Name if they do not have NAs & if the length of the Sample.Name is greater than 0, meaning it is not empty, pipes data down
# does a double QC check to make sure the Sample.Name value is present and not an NA
mutate(
Date = mdy_hm(Date)
)
computed <-
raw %>%
group_by(Sample.Name) %>%
# pipe in raw data and group by the Sample.Name, pipe down
summarise(
dttm = format(min(Date), "%F %R"),
# sets dttm equal to the minimum date-time value in the "Date" column and then converts it into the format "YYYY-MM-DD hh:mm"
# this is because have duplicate measurements for each sample and only need 1 timestamp
concentration = round(mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets concentration equal to the mean value of Nucleic.Acid.ng.uL. and rounds to 3 digits
cv = round(sd(Nucleic.Acid.ng.uL.)/mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets cv equal to coefficiant of variance of Nucleic.Acid.ng.uL. and rounds to 3 digits
num_replicates = n(),
# sets num_replicates equal to the number of replicated samples
qc_flag = case_when(
cv > .2 ~ "HIGH CV",
num_replicates < 2 ~ "no replicates"
)
# sets qc_flag to flag for either cv > .2 or num_replicates < 2 with each having a unique flag string
) %>%
rename(SampleID=Sample.Name)
no_concentrations <- filter(computed, is.na(concentration))
# checks computed$concentration for NAs and stores in no_concentrations
err_tibble = tibble()
if( nrow(no_concentrations) > 0) {
err_tibble = tribble(
~Type, ~Property, ~Message,
"error", "concentration", str_c("The following are missing Nucleic Acid values: ", no_concentrations$SampleID, sep = "")
)
}
if( gen_plots ) {
# gen_plots is a toggle button on SampleManager, if clicked, the loop will execute
plot_data <- group_by(raw, Sample.Name)
# sets plot_data equal to raw DF grouped by Sample.Name
plots_df <- map2_dfr(group_split(plot_data), group_keys(plot_data)$Sample.Name, function(df, sampleid){
# splits plot_data by Sample.Name,
filename = file.path("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/transform_scripts/",
paste0(sampleid, "_", assay_design_id, "_", format(now(), "%Y%m%d_%H%M%S"), ".jpg"))
# sets filename equal to the file path for the .jpg to be output. Pastes "sampleid_assay_design_id_yearmonthday_hourminutesecond.jpg"
jpeg(filename, width = 350, height = 350)
# sets jpeg name as filename stored value and sets dimensions of jpeg
boxplot(Nucleic.Acid.ng.uL. ~ Sample.Name, data = df, frame = FALSE, main = sampleid)
# plots a boxplot of Nucleic.Acid.ng.uL. col by Sample.Name, with the title being the sampleid
dev.off()
tibble(SampleID=sampleid, plot=filename)
# creates a tibble to store the sampleid and plot for each sample
})
computed <- left_join(computed, plots_df, by="SampleID")
# adds the plots to computed DF using left_join and sampleid
rm(plot_data)
rm(plots_df)
# remove plot_data and plots_df objects
}
baseuuid <- paste(sample(c(letters[1:6],0:9),30,replace=TRUE),collapse="")
# takes a random sampling of 30 from letters A-F and numbers 0-9 and create a base uuid
uuid <- paste(
substr(baseuuid,1,8),
"-",
substr(baseuuid,9,12),
"-",
"4",
substr(baseuuid,13,15),
"-",
sample(c("8","9","a","b"),1),
substr(baseuuid,16,18),
"-",
substr(baseuuid,19,30),
sep="",
collapse=""
)
writeLines(str_c("uuid", uuid, sep = "\t"), con = run.prop.file)
###########################################################
# Write the transformed data to the output file location. #
###########################################################
write_tsv(computed, run.output.file, na = "")
###########################################################
# Write the transformed data to the output file location. #
###########################################################
write_tsv(computed, run.output.file, na = "")
library(readr)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(magrittr)
library(Rlabkey)
library(purrr)
### Get run properties file
# run.props set equal to local run properties file path
run.props = labkey.transform.readRunPropertiesFile("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/@files/transform_scripts/runProperties_local.tsv");
### Get the original file uploaded by the user. (Use this if the assay framework fails to convert it to an TSV format.)
# run.input.file set equal to local input .tsv file by taking the path for the runDataUploadedFile from run.props
run.input.file = labkey.transform.getRunPropertyValue(run.props, "runDataUploadedFile");
### Parameter set at import time in web UI to generate plots
# gen_plots is set equal to the generate_plots value found in run.props. This is a manual selection when running assay.
gen_plots <- !is.na(labkey.transform.getRunPropertyValue(run.props, "generate_plots"));
# assay_design_id is set equal to the protocolId of the assay found in run.props, which is unique for each assay.
assay_design_id <- labkey.transform.getRunPropertyValue(run.props, "protocolId");
### Get the file output by the transform script.
# run.prop.file is set equal to transformedRunPropertiesFile found in run.props which sets the path. Currently, the uuid is pasted here
run.prop.file = labkey.transform.getRunPropertyValue(run.props, "transformedRunPropertiesFile");
# run.output.file is set equal to
run.output.file = "/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/@files/transform_scripts/runDataFile";
# error.file is set equal to errorsFile found in run.props.
error.file = labkey.transform.getRunPropertyValue(run.props, "errorsFile");
raw <- read.delim(run.input.file, fileEncoding = "utf-16le") %>%
# read in table format, file path found in run.input.file, encoding needed for this instrument, pipes data down before sending to raw
filter(!is.na(Sample.Name), str_length(Sample.Name) > 0) %>%
# filter piped data to include Sample.Name if they do not have NAs & if the length of the Sample.Name is greater than 0, meaning it is not empty, pipes data down
# does a double QC check to make sure the Sample.Name value is present and not an NA
mutate(
Date = mdy_hm(Date)
)
View(raw)
computed <-
raw %>%
group_by(Sample.Name) %>%
# pipe in raw data and group by the Sample.Name, pipe down
summarise(
dttm = format(min(Date), "%F %R"),
# sets dttm equal to the minimum date-time value in the "Date" column and then converts it into the format "YYYY-MM-DD hh:mm"
# this is because have duplicate measurements for each sample and only need 1 timestamp
concentration = round(mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets concentration equal to the mean value of Nucleic.Acid.ng.uL. and rounds to 3 digits
cv = round(sd(Nucleic.Acid.ng.uL.)/mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets cv equal to coefficiant of variance of Nucleic.Acid.ng.uL. and rounds to 3 digits
num_replicates = n(),
# sets num_replicates equal to the number of replicated samples
qc_flag = case_when(
cv > .2 ~ "HIGH CV",
num_replicates < 2 ~ "no replicates"
)
# sets qc_flag to flag for either cv > .2 or num_replicates < 2 with each having a unique flag string
) %>%
rename(SampleID=Sample.Name)
no_concentrations <- filter(computed, is.na(concentration))
# checks computed$concentration for NAs and stores in no_concentrations
err_tibble = tibble()
if( nrow(no_concentrations) > 0) {
err_tibble = tribble(
~Type, ~Property, ~Message,
"error", "concentration", str_c("The following are missing Nucleic Acid values: ", no_concentrations$SampleID, sep = "")
)
}
if( gen_plots ) {
# gen_plots is a toggle button on SampleManager, if clicked, the loop will execute
plot_data <- group_by(raw, Sample.Name)
# sets plot_data equal to raw DF grouped by Sample.Name
plots_df <- map2_dfr(group_split(plot_data), group_keys(plot_data)$Sample.Name, function(df, sampleid){
# splits plot_data by Sample.Name,
filename = file.path("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/@files/transform_scripts/",
paste0(sampleid, "_", assay_design_id, "_", format(now(), "%Y%m%d_%H%M%S"), ".jpg"))
# sets filename equal to the file path for the .jpg to be output. Pastes "sampleid_assay_design_id_yearmonthday_hourminutesecond.jpg"
jpeg(filename, width = 350, height = 350)
# sets jpeg name as filename stored value and sets dimensions of jpeg
boxplot(Nucleic.Acid.ng.uL. ~ Sample.Name, data = df, frame = FALSE, main = sampleid)
# plots a boxplot of Nucleic.Acid.ng.uL. col by Sample.Name, with the title being the sampleid
dev.off()
tibble(SampleID=sampleid, plot=filename)
# creates a tibble to store the sampleid and plot for each sample
})
computed <- left_join(computed, plots_df, by="SampleID")
# adds the plots to computed DF using left_join and sampleid
rm(plot_data)
rm(plots_df)
# remove plot_data and plots_df objects
}
baseuuid <- paste(sample(c(letters[1:6],0:9),30,replace=TRUE),collapse="")
# takes a random sampling of 30 from letters A-F and numbers 0-9 and create a base uuid
uuid <- paste(
substr(baseuuid,1,8),
"-",
substr(baseuuid,9,12),
"-",
"4",
substr(baseuuid,13,15),
"-",
sample(c("8","9","a","b"),1),
substr(baseuuid,16,18),
"-",
substr(baseuuid,19,30),
sep="",
collapse=""
)
writeLines(str_c("uuid", uuid, sep = "\t"), con = run.prop.file)
###########################################################
# Write the transformed data to the output file location. #
###########################################################
write_tsv(computed, run.output.file, na = "")
if( nrow(err_tibble) > 0) {
write_tsv(err_tibble, error.file, na = "")
# if there is an error tibble written, it will write a .tsv file with the errors to the error.file path from run.props
}
library(readr)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(magrittr)
library(Rlabkey)
library(purrr)
### Get run properties file
# run.props set equal to local run properties file path
run.props = labkey.transform.readRunPropertiesFile("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/@files/transform_scripts/runProperties_local_BAD.tsv");
### Get the original file uploaded by the user. (Use this if the assay framework fails to convert it to an TSV format.)
# run.input.file set equal to local input .tsv file by taking the path for the runDataUploadedFile from run.props
run.input.file = labkey.transform.getRunPropertyValue(run.props, "runDataUploadedFile");
library(readr)
library(tidyr)
library(dplyr)
library(stringr)
library(lubridate)
library(magrittr)
library(Rlabkey)
library(purrr)
### Get run properties file
# run.props set equal to local run properties file path
run.props = labkey.transform.readRunPropertiesFile("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/@files/transform_scripts/runProperties_local_BAD.tsv");
### Get the original file uploaded by the user. (Use this if the assay framework fails to convert it to an TSV format.)
# run.input.file set equal to local input .tsv file by taking the path for the runDataUploadedFile from run.props
run.input.file = labkey.transform.getRunPropertyValue(run.props, "runDataUploadedFile");
### Parameter set at import time in web UI to generate plots
# gen_plots is set equal to the generate_plots value found in run.props. This is a manual selection when running assay.
gen_plots <- !is.na(labkey.transform.getRunPropertyValue(run.props, "generate_plots"));
# assay_design_id is set equal to the protocolId of the assay found in run.props, which is unique for each assay.
assay_design_id <- labkey.transform.getRunPropertyValue(run.props, "protocolId");
### Get the file output by the transform script.
# run.prop.file is set equal to transformedRunPropertiesFile found in run.props which sets the path. Currently, the uuid is pasted here
run.prop.file = labkey.transform.getRunPropertyValue(run.props, "transformedRunPropertiesFile");
# run.output.file is set equal to
run.output.file = "/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/@files/transform_scripts/runDataFile";
# error.file is set equal to errorsFile found in run.props.
error.file = labkey.transform.getRunPropertyValue(run.props, "errorsFile");
raw <- read.delim(run.input.file, fileEncoding = "utf-16le") %>%
# read in table format, file path found in run.input.file, encoding needed for this instrument, pipes data down before sending to raw
filter(!is.na(Sample.Name), str_length(Sample.Name) > 0) %>%
# filter piped data to include Sample.Name if they do not have NAs & if the length of the Sample.Name is greater than 0, meaning it is not empty, pipes data down
# does a double QC check to make sure the Sample.Name value is present and not an NA
mutate(
Date = mdy_hm(Date)
)
View(raw)
computed <-
raw %>%
group_by(Sample.Name) %>%
# pipe in raw data and group by the Sample.Name, pipe down
summarise(
dttm = format(min(Date), "%F %R"),
# sets dttm equal to the minimum date-time value in the "Date" column and then converts it into the format "YYYY-MM-DD hh:mm"
# this is because have duplicate measurements for each sample and only need 1 timestamp
concentration = round(mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets concentration equal to the mean value of Nucleic.Acid.ng.uL. and rounds to 3 digits
cv = round(sd(Nucleic.Acid.ng.uL.)/mean(Nucleic.Acid.ng.uL.), digits = 3),
# sets cv equal to coefficiant of variance of Nucleic.Acid.ng.uL. and rounds to 3 digits
num_replicates = n(),
# sets num_replicates equal to the number of replicated samples
qc_flag = case_when(
cv > .2 ~ "HIGH CV",
num_replicates < 2 ~ "no replicates"
)
# sets qc_flag to flag for either cv > .2 or num_replicates < 2 with each having a unique flag string
) %>%
rename(SampleID=Sample.Name)
no_concentrations <- filter(computed, is.na(concentration))
# checks computed$concentration for NAs and stores in no_concentrations
err_tibble = tibble()
if( nrow(no_concentrations) > 0) {
err_tibble = tribble(
~Type, ~Property, ~Message,
"error", "concentration", str_c("The following are missing Nucleic Acid values: ", no_concentrations$SampleID, sep = "")
)
}
if( gen_plots ) {
# gen_plots is a toggle button on SampleManager, if clicked, the loop will execute
plot_data <- group_by(raw, Sample.Name)
# sets plot_data equal to raw DF grouped by Sample.Name
plots_df <- map2_dfr(group_split(plot_data), group_keys(plot_data)$Sample.Name, function(df, sampleid){
# splits plot_data by Sample.Name,
filename = file.path("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/Labkey/@files/transform_scripts/",
paste0(sampleid, "_", assay_design_id, "_", format(now(), "%Y%m%d_%H%M%S"), ".jpg"))
# sets filename equal to the file path for the .jpg to be output. Pastes "sampleid_assay_design_id_yearmonthday_hourminutesecond.jpg"
jpeg(filename, width = 350, height = 350)
# sets jpeg name as filename stored value and sets dimensions of jpeg
boxplot(Nucleic.Acid.ng.uL. ~ Sample.Name, data = df, frame = FALSE, main = sampleid)
# plots a boxplot of Nucleic.Acid.ng.uL. col by Sample.Name, with the title being the sampleid
dev.off()
tibble(SampleID=sampleid, plot=filename)
# creates a tibble to store the sampleid and plot for each sample
})
computed <- left_join(computed, plots_df, by="SampleID")
# adds the plots to computed DF using left_join and sampleid
rm(plot_data)
rm(plots_df)
# remove plot_data and plots_df objects
}
baseuuid <- paste(sample(c(letters[1:6],0:9),30,replace=TRUE),collapse="")
# takes a random sampling of 30 from letters A-F and numbers 0-9 and create a base uuid
uuid <- paste(
substr(baseuuid,1,8),
"-",
substr(baseuuid,9,12),
"-",
"4",
substr(baseuuid,13,15),
"-",
sample(c("8","9","a","b"),1),
substr(baseuuid,16,18),
"-",
substr(baseuuid,19,30),
sep="",
collapse=""
)
writeLines(str_c("uuid", uuid, sep = "\t"), con = run.prop.file)
###########################################################
# Write the transformed data to the output file location. #
###########################################################
write_tsv(computed, run.output.file, na = "")
if( nrow(err_tibble) > 0) {
write_tsv(err_tibble, error.file, na = "")
# if there is an error tibble written, it will write a .tsv file with the errors to the error.file path from run.props
}
mySeqs,_read.csv("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/Nathan_Poresky/SBM_Code/QC2file_align.fasta")
mySeqs<-read.csv("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/Nathan_Poresky/SBM_Code/QC2file_align.fasta")
View(mySeqs)
fastafile<- read.fasta(file = "/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/Nathan_Poresky/SBM_Code/QC2file_align.fasta", seqtype = "DNA", as.string = TRUE, set.attributes = FALSE)
library(bioseq)
library(Biostrings)
library(seqinr)
library(stringdist)
library(FactoMineR)
library(DECIPHER)
library(ggplot2)
library(devtools)
library(tidyverse)
fastafile<- read.fasta(file = "/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/Nathan_Poresky/SBM_Code/QC2file_align.fasta", seqtype = "DNA", as.string = TRUE, set.attributes = FALSE)
View(fastafile)
mySeqs<- read.alignment(file = "/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/Nathan_Poresky/SBM_Code/QC2file_align.fasta", format = "fasta", forceToLower = FALSE)
table(sapply(mySeqs$seq, nchar)) ##Check seq length
plot(table(sapply(mySeqs$seq, nchar))) ##Check seq length
#Load packages
library(dplyr)
library(Seurat)
library(patchwork)
library(ggplot2)
?NormalizeData
plot(myMDS1$points[,1],myMDS1$points[,2])
plot(myMDS2$points[,1],myMDS2$points[,2])
#ssTA Tutorials
library("ssTA")
setwd("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/ssTA/tutorial")
#ssTA Tutorials
library("ssTA")
setwd("/Users/wbender/Library/CloudStorage/Box-Box/AndersonLabShared/William_Bender/ssTA_2.0/tutorial")
#############################################################################################################################################################################################################################################################
#Tutorial with GOOD Nucleic Acid sequences. All sequences pass through QC function.
#############################################################################################################################################################################################################################################################
#Create a vector containing all the lengths of sequences that are contained in the input fasta file.
myLengths <- c(1725)
#Perform QC to pull all sequences of previously recorded lengths and remove any sequences which has a character or symbol other than "ATCG".
myQCSeqs <- QC("PracticeSeqs_NA_GOOD.fasta", myLengths, "Output_GOOD/PracticeSeqs_Cleaned_GOOD.fasta")
